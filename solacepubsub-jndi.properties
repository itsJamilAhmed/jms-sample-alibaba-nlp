# Ref: https://solace.com/samples/solace-samples-jms/using-jndi/

# The SolacePubSub Broker provides an integrated JNDI Service so there will be no connection factory, queue and topic entries in this file.
# Instead the provider.url entry will redirect requests to the network JNDI service running in the broker
 
java.naming.factory.initial = com.solacesystems.jndi.SolJNDIInitialContextFactory

# security.principal and security.credentials is used to pass the username and password to connect to the JMS Broker and JNDI Service combined
# note also the Solace PubSub+ has the concept of a 'VPN' as a virtual slice of a given broker. This VPN name is provided along with the username in a 'user@vpn-name' fashion.
java.naming.security.principal=solace-cloud-client@msgvpn-name-here
java.naming.security.credentials=password-here

# Finally the network URI to connect to the broker and JNDI
java.naming.provider.url = tcp://vmr-mr8v6yidj.messaging.solace.cloud:55555

# Important: 
# Within the Solace PubSub+ Broker's JMS/JNDI administration the following need to be added:
# 1. A connection factory: "ConnectionFactory"
# 2. A send destination label: "nlp-translation-requests-send" mapped to a physical destination such as: "nlp/translation/requests"
# 3. A receive destination label: "nlp-translation-requests-receive" mapped to a physical destination like: "nlp/translation/requests"

# Reminder on why there are two separate destination look-ups: The program's can be decoupled on their destination, relying on the JMS broker to match them up.
# e.g. Through topic to queue mapping, wildcard pattern subscriptions, etc. 